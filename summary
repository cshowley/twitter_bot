{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notes:\n",
    "\n",
    "python twitter api: https://python-twitter.readthedocs.io/en/latest/installation.html\n",
    "\n",
    "1. pip install python-twitter (which also installs the dependencies: requests and requests oauthlib)\n",
    "2. create a twitter app: https://apps.twitter.com/\n",
    "    Requires creating a twitter account and jumping through a series of hoops so Twitter can say they've done their due diligence in, if not totally stopping Eastern Europeans from spamming their site with tweets engineered to maximize political entropy, at least acquiring the minimum necessary legal shielding such that they are protected from culpability.\n",
    "3. Get your API's (secret) key and (secret) access token\n",
    "4. Test your API's connection:\n",
    "\n",
    "import twitter\n",
    "api = twitter.Api(consumer_key=[consumer key],\n",
    "                  \n",
    "                  consumer_secret=[consumer secret],\n",
    "                  \n",
    "                  access_token_key=[access token],\n",
    "                  \n",
    "                  access_token_secret=[access token secret])\n",
    "5. Assuming it didn't return an error, it's time to start pulling some data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import twitter\n",
    "api = twitter.Api(consumer_key='XXXXXX'\n",
    "                 , consumer_secret='XXXXXX'\n",
    "                 , access_token_key='XXXXXX'\n",
    "                 , access_token_secret='XXXXXX'\n",
    "                 )\n",
    "\n",
    "# The default parameter for this call is `user_id` which requires an extra step to find for a given account.\n",
    "# For the sake of completion, a site like this (http://gettwitterid.com) will do the legwork for you and give you the ID\n",
    "posts = api.GetUserTimeline(screen_name='CosmossUp')\n",
    "# OR as seen on http://gettwitterid.com/?user_name=CosmossUp&submit=GET+USER+ID\n",
    "posts = api.GetUserTimeline(user_id=2320507177)\n",
    "\n",
    "# This returns the last 20 status posts from the targeted profile in a list of `twitter.models.Status` objects, sorted\n",
    "# in reverse-chronological order\n",
    "\n",
    "print(posts[0])\n",
    "\n",
    "# This can be pretty printed after realizing it has a json structure\n",
    "import json\n",
    "print(json.dumps(json.loads(str(posts[0])), indent=4, separators=(',', ': ')))\n",
    "\n",
    "# But what we care about most is the text content of the tweet which can be accessed the easily\n",
    "print(posts[0].text)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Next we need a way to repost this text to Slack. There are many Slack APIs but I prefer Slacker by virtue of it being the top search result the first time I googled, \"slack python api.\" https://github.com/os/slacker\n",
    "\n",
    "pip install slacker\n",
    "\n",
    "7. You'll need another token, this time from Slack. Go to https://api.slack.com/custom-integrations/legacy-tokens and be greeted by a scary looking disclaimer that tells you that you can't be trusted with tokens and instead should use a Slack App$^{TM}$. Nah.\n",
    "\n",
    "8. With your newly generated token, follow Slackers documentation to post a few or as many twitter data to channels and users your heart's content. With all of Twitter's accounts' posts and all your colleague's channels at your disposal, remember: with great power comes great responsibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from slacker import Slacker\n",
    "\n",
    "slack = Slacker(token='XXXXXX')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To post to a channel as yourself:\n",
    "slack.chat.post_message(channel='#channel_name', text='text', as_user=True)\n",
    "\n",
    "# To post to a channel as a bot:\n",
    "slack.chat.post_message(channel='#channel_name'\n",
    "                        , text='text'\n",
    "                        , as_user=False\n",
    "                        , username='SpaceBot'\n",
    "                        , icon_url='<choose a 64x64 size image')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our bot needs a schedule to check for new posts. One simple method is using the cron: \n",
    "\n",
    "http://www.unixgeeks.org/security/newbie/unix/cron-1.html\n",
    "\n",
    "For cron noobs here's an extremely useful site that'll tell you when your schedule will run:\n",
    "\n",
    "https://crontab.guru/\n",
    "\n",
    "The script to grab the latest tweet, verify it's new against an ID stored in a text file, and push the results to Slack along with updating the stored ID, is below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filename = update_and upload.py\n",
    "\n",
    "import os\n",
    "import twitter\n",
    "from slacker import Slacker\n",
    "\n",
    "\n",
    "# Initialize APIs w/ tokens\n",
    "twitter = twitter.Api(consumer_key='<consumer key>'\n",
    "\t\t\t, consumer_secret='<consumer secret key>'\n",
    "\t\t\t, access_token_key='<access token>'\n",
    "\t\t\t, access_token_secret='<access token secret>')\n",
    "\n",
    "slack = Slacker(token='<token>')\n",
    "\n",
    "# Get filepath to project\n",
    "cwd = os.path.dirname(os.path.realpath(__file__))\n",
    "\n",
    "# Get latest tweet\n",
    "post_history = twitter.GetUserTimeline(screen_name='<screen name>')\n",
    "most_recent_post_id = post_history[0].id\n",
    "\n",
    "# Creates a placeholder value for tweet ID if file doesn't exist\n",
    "if not os.path.exists(cwd+'/id_history.txt'):\n",
    "\twith open(cwd+'/id_history.txt', 'w') as f:\n",
    "\t\tf.write('0')\n",
    "\n",
    "# Post tweet to Slack if ID doesn't match stored tweet, otherwise take no action\n",
    "with open(cwd+'/id_history.txt', 'r') as f:\n",
    "\tlines = f.readlines()\n",
    "\tfor line in lines:\n",
    "\t\tprevious_id = int(line.strip())\n",
    "\n",
    "if most_recent_post_id != previous_id:\n",
    "\twith open(cwd+'/id_history.txt', 'w') as f:\n",
    "\t\tf.write('{}'.format(most_recent_post_id))\n",
    "\tpost = post_history[0].text\n",
    "\tslack.chat.post_message(channel='<channel>'\n",
    "\t\t\t\t, text=post\n",
    "\t\t\t\t, as_user=False\n",
    "\t\t\t\t, username='<bot name>'\n",
    "\t\t\t\t, icon_url='<bot image>')\n",
    "else:\n",
    "\tpass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In bash:\n",
    "crontab -e\n",
    "\n",
    "# In the cron's editor, add a command to execute the script every day at 10am:\n",
    "0 10 * * * python /path/to/file/update_and_upload.py"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
